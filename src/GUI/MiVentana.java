    
package GUI;

import elements.*;
import java.awt.*;
import java.awt.geom.*;
import java.awt.event.*;
import java.io.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.logging.*;
import javax.swing.*;
import process.*;

public class MiVentana extends javax.swing.JFrame {
    private String name="", value="",pt1, pt2;
    private int x=0, conf, i,j, cont,val,r=0, id=1, idArc=1;
    private Point p1, p2;
    private Node mov;
    private File archivo;
    private FordFulkerson max;
    
    private ArrayList<Node> vtrNode;
    private ArrayList<Arcos> vtrArco, vtrDel,vtrtemp;
    private LinkedList<Elemento> DesH,ReH;
  

    public MiVentana() {
        initComponents();
        
        this.setSize(800, 600);
        this.setTitle("Max flow calculator");
        setIconImage(getIconImage());
        //Instanciamos los vectores.
        
        vtrNode = new ArrayList<>();
        vtrArco = new ArrayList<>();
        vtrDel = new ArrayList<>();
        vtrtemp = new ArrayList<>();
        DesH = new LinkedList<>();
        ReH = new LinkedList<>();
        
       
    }
    
    
    @Override
    public Image getIconImage(){
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("imgs/Log.png"));
        return retValue;
    }

    @Override
    public void paint(Graphics g){//MÃ©todo para pintar los elementos sobre el lienzo.
        super.paint(g);
        
        for(Arcos arc : vtrArco){//Recorremos el vector de relaciones.
            arc.DibRelacion(tablero.getGraphics());//Dibujamos elemento sobre el lienzo.
            
        }
        
        for(Node ele : vtrNode){//Recorremos el vector de nodos.
            ele.DibFigura(tablero.getGraphics());//Dibujamos elemento sobre el lienzo.
          
        } 
        
        if(!this.DesH.isEmpty()){
            tbtDes.setIcon(new ImageIcon(ClassLoader.getSystemResource("imgs/Des2.png")));
        }else{
            tbtDes.setIcon(new ImageIcon(ClassLoader.getSystemResource("imgs/Des.png")));
        }
        
        if(!this.ReH.isEmpty()){
            tbtReh.setIcon(new ImageIcon(ClassLoader.getSystemResource("imgs/Rea2.png")));
        }else{
            tbtReh.setIcon(new ImageIcon(ClassLoader.getSystemResource("imgs/Rea.png")));
        }
      
    } 
    
    
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jSeparator19 = new javax.swing.JSeparator();
        tablero = new javax.swing.JPanel();
        BarraHerramientas = new javax.swing.JToolBar();
        tbtNod = new javax.swing.JToggleButton();
        tbtRel = new javax.swing.JToggleButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        jSeparator9 = new javax.swing.JToolBar.Separator();
        jSeparator10 = new javax.swing.JToolBar.Separator();
        tbtRun = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jSeparator12 = new javax.swing.JToolBar.Separator();
        jSeparator11 = new javax.swing.JToolBar.Separator();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        tbtMov = new javax.swing.JToggleButton();
        tbtEdit = new javax.swing.JToggleButton();
        tbtDel = new javax.swing.JToggleButton();
        jSeparator13 = new javax.swing.JToolBar.Separator();
        jSeparator14 = new javax.swing.JToolBar.Separator();
        jSeparator15 = new javax.swing.JToolBar.Separator();
        jSeparator16 = new javax.swing.JToolBar.Separator();
        jSeparator18 = new javax.swing.JToolBar.Separator();
        jSeparator17 = new javax.swing.JToolBar.Separator();
        tbtDes = new javax.swing.JButton();
        tbtReh = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        opNew = new javax.swing.JMenuItem();
        opOpen = new javax.swing.JMenuItem();
        opSave = new javax.swing.JMenuItem();
        opClose = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OMACS Modificado");
        setExtendedState(JFrame.MAXIMIZED_BOTH);

        tablero.setBackground(new java.awt.Color(255, 255, 255));
        tablero.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                tableroMouseDragged(evt);
            }
        });
        tablero.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableroMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableroMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableroMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout tableroLayout = new javax.swing.GroupLayout(tablero);
        tablero.setLayout(tableroLayout);
        tableroLayout.setHorizontalGroup(
            tableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1087, Short.MAX_VALUE)
        );
        tableroLayout.setVerticalGroup(
            tableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 666, Short.MAX_VALUE)
        );

        BarraHerramientas.setRollover(true);

        tbtNod.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Cir.png"))); // NOI18N
        tbtNod.setToolTipText("Agregar Nodo");
        tbtNod.setFocusable(false);
        tbtNod.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbtNod.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbtNod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbtNodActionPerformed(evt);
            }
        });
        BarraHerramientas.add(tbtNod);
        tbtNod.getAccessibleContext().setAccessibleParent(tablero);

        tbtRel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Arr.png"))); // NOI18N
        tbtRel.setToolTipText("Agregar Relacion");
        tbtRel.setFocusable(false);
        tbtRel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbtRel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbtRel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbtRelActionPerformed(evt);
            }
        });
        BarraHerramientas.add(tbtRel);
        BarraHerramientas.add(jSeparator5);
        BarraHerramientas.add(jSeparator6);
        BarraHerramientas.add(jSeparator7);

        jSeparator8.setToolTipText("");
        BarraHerramientas.add(jSeparator8);
        BarraHerramientas.add(jSeparator9);
        BarraHerramientas.add(jSeparator10);

        tbtRun.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Run.png"))); // NOI18N
        tbtRun.setFocusable(false);
        tbtRun.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbtRun.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbtRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbtRunActionPerformed(evt);
            }
        });
        BarraHerramientas.add(tbtRun);
        BarraHerramientas.add(jSeparator4);
        BarraHerramientas.add(jSeparator3);
        BarraHerramientas.add(jSeparator12);
        BarraHerramientas.add(jSeparator11);
        BarraHerramientas.add(jSeparator1);
        BarraHerramientas.add(jSeparator2);

        tbtMov.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Mov.png"))); // NOI18N
        tbtMov.setToolTipText("Mover Elemento");
        tbtMov.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tbtMov.setFocusable(false);
        tbtMov.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbtMov.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbtMov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbtMovActionPerformed(evt);
            }
        });
        BarraHerramientas.add(tbtMov);

        tbtEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Edi.png"))); // NOI18N
        tbtEdit.setFocusable(false);
        tbtEdit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbtEdit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbtEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbtEditActionPerformed(evt);
            }
        });
        BarraHerramientas.add(tbtEdit);

        tbtDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Del.png"))); // NOI18N
        tbtDel.setToolTipText("Borrar Elemento");
        tbtDel.setFocusable(false);
        tbtDel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbtDel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbtDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbtDelActionPerformed(evt);
            }
        });
        BarraHerramientas.add(tbtDel);
        BarraHerramientas.add(jSeparator13);
        BarraHerramientas.add(jSeparator14);
        BarraHerramientas.add(jSeparator15);
        BarraHerramientas.add(jSeparator16);
        BarraHerramientas.add(jSeparator18);
        BarraHerramientas.add(jSeparator17);

        tbtDes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Des.png"))); // NOI18N
        tbtDes.setFocusable(false);
        tbtDes.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbtDes.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbtDes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbtDesActionPerformed(evt);
            }
        });
        BarraHerramientas.add(tbtDes);

        tbtReh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Rea.png"))); // NOI18N
        tbtReh.setFocusable(false);
        tbtReh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbtReh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbtReh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbtRehActionPerformed(evt);
            }
        });
        BarraHerramientas.add(tbtReh);

        jMenu1.setText("Opciones");

        opNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        opNew.setText("Nuevo Modelo");
        opNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opNewActionPerformed(evt);
            }
        });
        jMenu1.add(opNew);

        opOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        opOpen.setText("Abrir Modelo");
        opOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opOpenActionPerformed(evt);
            }
        });
        jMenu1.add(opOpen);

        opSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        opSave.setText("Guardar Modelo");
        opSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opSaveActionPerformed(evt);
            }
        });
        jMenu1.add(opSave);

        opClose.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_DOWN_MASK));
        opClose.setText("Cerrar Aplicacion");
        opClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opCloseActionPerformed(evt);
            }
        });
        jMenu1.add(opClose);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BarraHerramientas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1087, Short.MAX_VALUE)
            .addComponent(tablero, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(BarraHerramientas, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void opNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opNewActionPerformed
        //Eliminamos todos los elementos. (Borramos todo lo que hay en el lienzo)
        this.vtrArco.clear();
        this.vtrNode.clear();
        this.DesH.clear();
        this.ReH.clear();
        this.vtrtemp.clear();
        this.vtrDel.clear();
        repaint();
    }//GEN-LAST:event_opNewActionPerformed

    private void opCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opCloseActionPerformed
        //Terminamos la ejecuciÃ³n del sistema.
        System.exit(0);
    }//GEN-LAST:event_opCloseActionPerformed

    private void tbtRelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbtRelActionPerformed
        if (tbtRel.isSelected()) {//Validamos botÃ³n activado.
            //Desactivamos los demÃ¡s botones.
            tbtEdit.setEnabled(false);
            tbtMov.setEnabled(false);
            tbtDel.setEnabled(false);
            tbtNod.setEnabled(false);
            tbtRun.setEnabled(false);
            tbtDes.setEnabled(false);
            tbtReh.setEnabled(false);
        } else {
            //Activamos nuevamente los botones.
            tbtEdit.setEnabled(true);
            tbtNod.setEnabled(true);
            tbtDel.setEnabled(true);
            tbtMov.setEnabled(true);
            tbtRun.setEnabled(true);
            tbtDes.setEnabled(true);
            tbtReh.setEnabled(true);
        }
    }//GEN-LAST:event_tbtRelActionPerformed

    private void tableroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableroMouseClicked
        if(tbtNod.isSelected()){
            if(evt.getButton() == MouseEvent.BUTTON1){//Validamos click.
                int xm = evt.getX();
                int ym = evt.getY();
            
                do{
                     name = JOptionPane.showInputDialog(this, "Ingrese ID: ", "Nodo", 3);//Solicitamos ID.
                     if(name.length()==0){
                         JOptionPane.showMessageDialog(tablero, "Debe ingresar un ID.", "Error", 2);
                     }
                }while(name.length()==0);
                
                do{
                    for (Node ele : vtrNode) {//Recorremos el arraylist de nodos.
                        if (ele.getName().compareTo(name) != 0) {//Buscamos coincidencia
                            this.x = 1;
                        } else {//Coincidencia encontrada
                            JOptionPane.showMessageDialog(tablero, "Este ID ya ha sido utilizado.", "Error", 2);//Mostramos mensaje de coincidencia.
                            name = JOptionPane.showInputDialog(tablero, "Ingrese ID: ", "Nodo", 3);//Solicitamos ID.
                            this.x = 0;      
                        }
                    }
                    
                }while(x==0 && !this.vtrNode.isEmpty());
                
                Node n = new Node(xm,ym, name, id);
                this.vtrNode.add(n);             //creamos un nuevo nodo
                i = this.vtrNode.indexOf(n);
        
                this.DesH.addFirst(new Elemento(name,"add",i,n,id));//Almacenamos el nodo en la pila para poder  deshacer los cambios aplicados.
                this.ReH.clear();//Limpiamos la pila Rehacer debido a que se aÃ±adio una nueva accion de adicionar
                System.out.println(this.DesH.toString());
                id++;                
                repaint();//pintamos
            }
        }
        else if(tbtRel.isSelected()){//Validamos botÃ³n.
            //CREACIÃN DE RELACIONES.
            if(evt.getButton() == MouseEvent.BUTTON1){//Validamos click.
            
                for(Node ele : vtrNode){//Recorremos vector de Elementos.
                    //Creamos rectangulo invisible para validar que el cursor se encuentre sobre un elemento.
                    if(new Rectangle(ele.getX()-75/2, ele.getY()-75/2, 75, 75).contains(evt.getPoint())){
                        if(p1 == null){//Validamos primer click.
                            p1 = new Point(ele.getX(), ele.getY());//Almacenamos coordenadas de clickeado.
                            pt1 = ele.getName();
                            conf = 1;
                            cont = vtrNode.indexOf(ele);
                        }
                        else
                        {
                            if(conf==1 && ele!=vtrNode.get(cont)){//Validamos tipo de elemento sobre el que se hace segundo click.
                                p2 = new Point(ele.getX(),ele.getY());//Almacenamos coordenadas de segundo clickeado.
                                pt2 = ele.getName();
                                name = JOptionPane.showInputDialog(tablero, "Peso: ", "Arista", 3);//Solicitamos valor.
                                while(x!=0 && name!=null){//Validamos dato ingresado.
                                    x=1;
                                    try {//Validamos tipo de dato ingresado.
                                        if(!(Integer.parseInt(name)>=0)){//Verificar valor dentro del rango.
                                            JOptionPane.showMessageDialog(tablero, "Peso incorrecto.", "Error", 0);//Mostrar mensaje.
                                            name = JOptionPane.showInputDialog(tablero, "Peso: ", "Arista", 3);//Solicitar valor.
                                            if (name == null){
                                                x=0;
                                            }
                                        }else{
                                            x=0;
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(tablero, "Dato incorrecto.", "Error", 0);//Mostrar mensaje.
                                        name = JOptionPane.showInputDialog(tablero, "Peso: ", "Arista", 3);//Solicitar valor.
                                        if (name == null){
                                            x=0;
                                        }
                                    }
                                }
                                 r=0;
                                for(Arcos ar : vtrArco){//Recorremos arraylist de Elementos.
                                    //validamos si existen aristas adyacentes al vector
                                    if(ar.getFrom().equals(pt2) && ar.getTo().equals(pt1)){
                                        JOptionPane.showMessageDialog(tablero, "Relacion no permitida.", "Error", 0);//Mostrar mensaje.
                                        System.out.println("ciclo");
                                        r=1;
                                    
                                    }else if(ar.getFrom().equals(pt1) && ar.getTo().equals(pt2)){
                                        System.out.println("repetida");
                                        JOptionPane.showMessageDialog(tablero, "Ya existe una relacion entre los nodos.", "Error", 0);//Mostrar mensaje.
                                        r=2;
                                    }
                                   
                                }

                                if (name != null && r==0) {
                                    Arcos a = new Arcos(p1.x, p1.y, p2.x, p2.y, Integer.parseInt(name), pt1, pt2, idArc);
                                            
                                    this.vtrArco.add(a);//Creamos relaciÃ³n y anexamos al arraylist.
                                    i= this.vtrArco.indexOf(a);
                                    this.DesH.addFirst(new Elemento(name,"add",i,a,idArc));//Almacenamos la arista en la pila para poder  deshacer los cambios aplicados.
                                   System.out.println(this.DesH.toString());
                                    this.ReH.clear();//Limpiamos la pila Rehacer debido a que se aÃ±adio una nueva accion de adicionar
                                    idArc++;
                                    repaint();//Pintamos.
                                }
                            }
                           
                            //Reiniciamos las variables.
                            p1 = null;
                            p2 = null;
                            conf=0;
                            cont=0;
                        }
                    }
                }
            }
        }
        else if(tbtDel.isSelected()){//Validamos botÃ³n.
            for(Node ele : vtrNode){//Recorremos arraylist de Elementos.
                if(new Rectangle(ele.getX()-75/2, ele.getY()-75/2, 75, 75).contains(evt.getPoint())){//Creamos rectangulo invisible para validar que el cursor se encuentre sobre un elemento.
                    i= this.vtrNode.indexOf(ele);
                        
                    this.DesH.addFirst(new Elemento(ele.getName(),"del",i,ele,ele.getId()));//Almacenamos los elementos en la pila para poder  deshacer los cambios aplicados.
                    this.ReH.clear();
                    System.out.println(this.DesH.getFirst().getNodo().getName()+" "+this.DesH.getFirst().getAccion());
                    this.vtrNode.remove(i);
                    break;
                    }
                }
                
            for(Arcos arc : vtrArco){//Recorremos arraylist de Elementos.
                j= this.vtrArco.indexOf(arc);
                
                if(new Line2D.Double((double)arc.getFx1(),(double)arc.getFy1(),(double)arc.getFx2(),(double)arc.getFy2()).intersects(evt.getX()-10/10, evt.getY()-10/10, 10, 10)){//Creamos rectangulo invisible para validar que el cursor se encuentre sobre un elemento.
                    
                    this.DesH.addFirst(new Elemento(String.valueOf(arc.getValue()),"del",j,arc,arc.getId()));
                    System.out.println(this.DesH.toString());
                    this.ReH.clear();
                    this.vtrArco.remove(j);
                    break;  
                }                         
            } 
            repaint();
        }
        else if(tbtEdit.isSelected()){
            if(evt.getButton() == MouseEvent.BUTTON1){//Validamos click.
              
                for(Node ele : vtrNode){//Recorremos arraylist de Elementos.
                    if(new Rectangle(ele.getX()-75/2, ele.getY()-75/2, 75, 75).contains(evt.getPoint())){//Creamos rectangulo invisible para validar que el cursor se encuentre sobre un elemento.
                        i= this.vtrNode.indexOf(ele);
                        do{
                            name = JOptionPane.showInputDialog(this, "Ingrese ID: ", "Nodo", 3);//Solicitamos ID.
                            if(name.length()==0){
                                JOptionPane.showMessageDialog(tablero, "Debe ingresar un ID.", "Error", 2);//mostramos mensaje de error.
                            }
                        }while(name.length()==0);
                
                        do{
                            for (Node el : vtrNode) {//Recorremos el vector de nodos.
                                if (el.getName().compareTo(name) != 0) {//Buscamos coincidencia
                                    this.x = 1;
                                } else {//Coincidencia encontrada
                                    JOptionPane.showMessageDialog(tablero, "Este ID ya ha sido utilizado.", "Error", 2);//Mostramos mensaje de coincidencia.
                                    name = JOptionPane.showInputDialog(tablero, "Ingrese ID: ", "Nodo", 3);//Solicitamos ID.
                                    this.x = 0;
                                }
                            }
                        }while(x==0 && !this.vtrNode.isEmpty());
 
                       for(Arcos ar : vtrArco){//Recorremos el arraylist de Elementos.
                              //validamos si el nodo tiene aristas adyacentes 
                            if(ar.getFrom().equals(ele.getName())){
                                ar.setFrom(name);//actualizamos el atributo de adyacencia de un nodo a una arista
                            }
                            
                            if(ar.getTo().equals(ele.getName())){
                                ar.setTo(name);
                            }
                        }
                   
                        this.DesH.addFirst(new Elemento(ele.getName(),"upd",i,ele,ele.getId()));//almacenamos el elemento en la pila para porder deshacer los cambios aplicados.
                        this.ReH.clear();
                        this.vtrNode.get(i).setName(name); 
                        break;
                    }
                }
                
                for(Arcos arc : vtrArco){//Recorremos el arraylist de Elementos.
                    j= this.vtrArco.indexOf(arc);
      
                    if(new Line2D.Double((double)arc.getFx1(),(double)arc.getFy1(),(double)arc.getFx2(),(double)arc.getFy2()).intersects(evt.getX()-10/10, evt.getY()-10/10, 10, 10)){//Creamos una linea invisible para validar que el cursor se encuentre sobre un elemento.
                        
                        do{
                            name = JOptionPane.showInputDialog(this, "Peso: ", "Arista", 3);//Solicitamos ID.
                            if(name.length()==0){
                                JOptionPane.showMessageDialog(tablero, "Debe ingresar un peso.", "Error", 2);//mostramos mensaje de error
                            }
                        }while(name.length()==0);//validamos que se ingrese un valor
                        
                        val=Integer.parseInt(name);
                        
                        this.DesH.addFirst(new Elemento(String.valueOf(arc.getValue()),"upd",j,arc,arc.getId()));//almacenamos los elementos en una pila para porder deshacer los cambios realizados.
                        this.ReH.clear();//limpiamos la pila Rehacer debido a que se produjo un actualizacion recientemente
                        this.vtrArco.get(j).setValue(val);
                        break;    
                    }                         
                }   
            }
        repaint();
        }
    }//GEN-LAST:event_tableroMouseClicked
  
    private void tbtMovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbtMovActionPerformed
        if (tbtMov.isSelected()) {//Validamos botÃ³n activado.
            //Desactivamos los demÃ¡s botones.
            tbtEdit.setEnabled(false);
            tbtRel.setEnabled(false);
            tbtDel.setEnabled(false);
            tbtNod.setEnabled(false);
            tbtRun.setEnabled(false);
            tbtDes.setEnabled(false);
            tbtReh.setEnabled(false);
        } else {
            //Activamos nuevamente los botones.
            tbtEdit.setEnabled(true);
            tbtRel.setEnabled(true);
            tbtDel.setEnabled(true);
            tbtNod.setEnabled(true);
            tbtRun.setEnabled(true);
            tbtDes.setEnabled(true);
            tbtReh.setEnabled(true);
        }
    }//GEN-LAST:event_tbtMovActionPerformed

    private void tbtDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbtDelActionPerformed
        if (tbtDel.isSelected()) {//Validamos botÃ³n activado.
            //Desactivamos los demÃ¡s botones.
            tbtEdit.setEnabled(false);
            tbtRel.setEnabled(false);
            tbtMov.setEnabled(false);
            tbtNod.setEnabled(false);
            tbtRun.setEnabled(false);
            tbtDes.setEnabled(false);
            tbtReh.setEnabled(false);
        } else {
            //Activamos nuevamente los botones.
            tbtEdit.setEnabled(true);
            tbtRel.setEnabled(true);
            tbtMov.setEnabled(true);
            tbtNod.setEnabled(true);
            tbtRun.setEnabled(true);
            tbtDes.setEnabled(true);
            tbtReh.setEnabled(true);
        }
    }//GEN-LAST:event_tbtDelActionPerformed

    private void tableroMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableroMousePressed
        if(tbtMov.isSelected()){//Validamos botÃ³n. TRASLACIÃN DE NODOS.
            i = 0;
            for (Node ele : vtrNode) {//Recorremos vector de Elementos.
                if (new Rectangle(ele.getX()-75/2, ele.getY()-75/2, 75, 75).contains(evt.getPoint())) {//Creamos rectangulo invisible para validar que el cursor se encuentre sobre un elemento.
                    System.out.println("movimiento: "+ele.getId()+" "+ele.getName());
                    mov = ele;//Almacenamos elemento.
                    cont = i;//Almacenamos posiciÃ³n de elemento.
                }
                i++;
            } 
            System.out.println("movimiento: "+mov.getId()+" "+mov.getName());
            this.DesH.addFirst(new Elemento(mov.getName(),"mov",cont,mov,mov.getId()));//almacenamos el elemento en la pila para porder deshacer los cambios aplicados.
            this.ReH.clear();//limpiamos la pila Rehacer debido a que se produjo un actualizacion recientemente
             System.out.println(mov.getX()+" "+mov.getY()+" "+mov.getName()+" "+mov.getId());
        }
       
    }//GEN-LAST:event_tableroMousePressed

    private void tableroMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableroMouseReleased
        if(tbtMov.isSelected()){//Validamos botÃ³n. TRASLACIÃN DE NODOS. Reiniciamos Variables.
            mov = null;
            cont = -1;
        }
    }//GEN-LAST:event_tableroMouseReleased

    private void tableroMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableroMouseDragged
        
        if(tbtMov.isSelected()){//Validamos botÃ³n. TRASLACIÃN DE NODOS.
            if (mov != null) {//Validamos que se haya seleccionado un elemento.
                this.vtrNode.set(cont, new Node(evt.getX(), evt.getY(), mov.getName(), mov.getId()));
                //repaint();//Pintamos.
                i = 0;
                
                for (Arcos arc : vtrArco) {//Recorremos el arraylist de Relaciones.
                    if (new Rectangle(arc.getX1() - 75 / 2, arc.getY1() - 75 / 2, 75, 75).contains(evt.getPoint())) {//Creamos rectangulo invisible para validar que el cursor se encuentre sobre un elemento.
                        this.vtrArco.set(i, new Arcos(evt.getX(), evt.getY(), arc.getX2(), arc.getY2(), arc.getValue(), arc.getFrom(), arc.getTo(), arc.getId()));//Actualizamos las coordenadas del nuevo extremo de las relaciones.
                    } else if (new Rectangle(arc.getX2() - 75 / 2, arc.getY2() - 75 / 2, 75, 75).contains(evt.getPoint())) {//Creamos rectangulo invisible para validar que el cursor se encuentre sobre un elemento.
                        this.vtrArco.set(i, new Arcos(arc.getX1(), arc.getY1(), evt.getX(), evt.getY(), arc.getValue(), arc.getFrom(), arc.getTo(), arc.getId()));//Actualizamos las coordenadas del nuevo extremo de las relaciones.
                    }
                    i++;
                }
            }
        }
        
       repaint();//Pintamos.
    }//GEN-LAST:event_tableroMouseDragged

    private void opSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opSaveActionPerformed
        //GUARDAR MODELO.
        JFileChooser SvdFile = new JFileChooser();//Instanciamos nueva variable.
        SvdFile.setApproveButtonText("Guardar Modelo");//Modificamos label de boton.
        SvdFile.showSaveDialog(null);//Indicamos acciÃ³n.
        File file = new File(SvdFile.getSelectedFile()+".txt");//Instanciamos nueva variable y le pasamos el archivo creado.
        
        try {//Abrimos el archivo para escribir sobre Ã©l.
            BufferedWriter Esc = new BufferedWriter(new FileWriter(file));//Instanciamos variable para manejar la informaciÃ³n ingresada.
            Esc.write("NODOS");
            Esc.write("\r\n");
            for (Node ele : vtrNode) {//Recorremos el arraylist de elementos y aÃ±adimos cada propiedad separada por ";".
                Esc.write(ele.getX() + ";" + ele.getY() + ";" + ele.getName() + ";" + ele.isColor());
                Esc.write("\r\n");//Nueva linea.
            }
            Esc.write("ARISTAS");
            Esc.write("\r\n");
            for (Arcos arc : vtrArco) {//Recorremos vector Relaciones y aÃ±adimos cada propiedad separada por ";".
                Esc.write(arc.getX1() + ";" + arc.getY1() + ";" + arc.getX2() + ";" + arc.getY2() + ";" + arc.getValue()+ ";" +arc.getFrom()+ ";" +arc.getTo());
                Esc.write("\r\n");
            } 
            Esc.write(".");
            Esc.close();//Cerramos archivo.
            JOptionPane.showMessageDialog(tablero, "Archivo guardado con Ã©xito.", "Success", 1);//Mostramos mensaje.
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(tablero, "No se pudo guardar el archivo.", "Error", 0);//Mostramos mensaje.
        }
    }//GEN-LAST:event_opSaveActionPerformed

    private void opOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opOpenActionPerformed
        //ABRIR MODELO.
        x=0;
        id=1;
        idArc=1;
        String [] str;
        
        JFileChooser OpndFile = new JFileChooser();//Instanciamos nueva variable.
        OpndFile.showOpenDialog(null);//Indicamos acciÃ³n.
        BufferedReader br;//Espacio de memoria para manejar la informaciÃ³n del archiovo.
        
        try {
            br = new BufferedReader(new FileReader(OpndFile.getSelectedFile())); //Instanciamos variable para manejar la informaciÃ³n extraida.
            //Limpiamos los arraylist.
            this.vtrArco.clear();
            this.vtrNode.clear();
            String line; //VARIABLE PARA MANIPULAR CADA LINEA DEL ARCHIVO
            //LEER EL ARCHIVO HASTA QUE NO HAYAN MÃS LINEAS
            br.readLine();
            while (!".".equals(line=br.readLine())) {
                //RECORTAR LA INFORMACIÃN
                str = line.split(";"); //"; discriminador"

                //MANIPULAR DATOS
                if(str[0].compareTo("ARISTAS")==0){//Verificamos secciÃ³n del archivo.
                    x=1;
                    if ((line = br.readLine())!=null) {
                        str = line.split(";"); //"; discriminador"
                    }
                } 
                
                if(x==0){//Nodos
                    this.vtrNode.add(new Node(Integer.parseInt(str[0]),Integer.parseInt(str[1]),str[2],Boolean.valueOf(str[3]), id));
                    id++;
                }else{//Relaciones.
                    this.vtrArco.add(new Arcos(Integer.parseInt(str[0]),Integer.parseInt(str[1]),Integer.parseInt(str[2]),
                            Integer.parseInt(str[3]),Integer.parseInt(str[4]), str[5], str[6], idArc));
                    idArc++;
                }
            }
            repaint();//Pintamos.
            br.close();//Cerramos archivo.
            JOptionPane.showMessageDialog(tablero, "Archivo abierto con Ã©xito.", "Success", 1);//Mostramos mensaje.
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MiVentana.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(tablero, "No se pudo abrir el archivo.", "Error", 0);//Mostramos mensaje.
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(tablero, "No se pudo abrir el archivo.", "Error", 0);//Mostramos mensaje.
        }
    }//GEN-LAST:event_opOpenActionPerformed

    private void tbtNodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbtNodActionPerformed
        if (tbtNod.isSelected()) {//Validamos botÃ³n activado.
            //Desactivamos los demÃ¡s botones.
            tbtEdit.setEnabled(false);
            tbtRel.setEnabled(false);
            tbtMov.setEnabled(false);
            tbtDel.setEnabled(false);
            tbtRun.setEnabled(false);
            tbtDes.setEnabled(false);
            tbtReh.setEnabled(false);

        } else {
            //Activamos nuevamente los botones.
            tbtEdit.setEnabled(true);
            tbtRel.setEnabled(true);
            tbtMov.setEnabled(true);
            tbtDel.setEnabled(true);
            tbtRun.setEnabled(true);
            tbtDes.setEnabled(true);
            tbtReh.setEnabled(true);
        }
    }//GEN-LAST:event_tbtNodActionPerformed

    private void tbtEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbtEditActionPerformed
        if (tbtEdit.isSelected()) {//Validamos botÃ³n activado.
            //Desactivamos los demÃ¡s botones.
            tbtNod.setEnabled(false);
            tbtRel.setEnabled(false);
            tbtMov.setEnabled(false);
            tbtDel.setEnabled(false);
            tbtRun.setEnabled(false);
            tbtDes.setEnabled(false);
            tbtReh.setEnabled(false);
            
        } else {
            //Activamos nuevamente los botones.
            tbtNod.setEnabled(true);
            tbtRel.setEnabled(true);
            tbtMov.setEnabled(true);
            tbtDel.setEnabled(true);
            tbtRun.setEnabled(true);
            tbtDes.setEnabled(true);
            tbtReh.setEnabled(true);
        }
    }//GEN-LAST:event_tbtEditActionPerformed

    private void tbtRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbtRunActionPerformed
            //DeclaraciÃ³n de los datos               
        int [][]adyacencia = new int[vtrNode.size()][vtrNode.size()];//Matriz de adyacencia
        String cuello = "";
        int row=-1, col=-1, start=0, end=0, band=0;
        String nodoInicial, nodoFinal;
        
        //Recorre los elementos para colorear todos los nodos de amarillo
        for(Node ele : vtrNode){
            if(ele.isColor()){
                ele.setColor(false);
            }
        }
        
        //Repinta todo en el tablero
        repaint();
        
        //RecorrerÃ¡ la posiciÃ³n del Arraylist de aristas para determinar las posiciones del nodo inicial y el final
        //para ubicar los pesos en la matriz de adyacencia
        for(int x = 0; x < vtrArco.size(); x++){
            for (int j = 0; j < vtrNode.size(); j++) {
                if(vtrArco.get(x).getFrom().equals(vtrNode.get(j).getName())){
                    row = j;
                }
                if(vtrArco.get(x).getTo().equals(vtrNode.get(j).getName())){
                    col = j;
                }
            }
            adyacencia[row][col] = vtrArco.get(x).getValue();   
        }
        
        //solicita el valor del nodo inicial y comprueba si existe
        do{
            nodoInicial = JOptionPane.showInputDialog("Ingrese el valor del nodo inicial: ");
            if(nodoInicial != null){//Comprueba que no se diÃ³ en cancelar o X
                //Verifica que exista al menos un nodo
                if(vtrNode.size() != 0){
                    for (int i = 0; i < vtrNode.size(); i++) {
                        if(nodoInicial.equals(vtrNode.get(i).getName())){
                            start = i;
                            band=0;
                        }else{
                            JOptionPane.showMessageDialog(null, "El nodo "+nodoInicial+" no existe.");
                            band=1;
                        }
                    }
                //Si no existen nodos envia el mensaje y se sale del calculo
                }else{
                    JOptionPane.showMessageDialog(null, "No se ha creado ningun nodo, intenta crear uno.");
                    band=2;
                }
            }else{
                band=2;
            }
        }while(band==1);
        
        //Si no se presionÃ³ el botÃ³n cancelar o X ingresa
        if(band!=2){
            
            //Recorre los nodos para pintar de azul al nodo inicial
            for(Node ele : vtrNode){
                if(ele.getName().equals(nodoInicial)){
                    ele.setColor(true);
                    repaint();
                }
            }
            
            //Resetea la variable del while
            band = 0;

            //solicita el valor del nodo final y comprueba si existe
            do{
                nodoFinal = JOptionPane.showInputDialog("Ingrese el valor del nodo Final: ");
                if(nodoFinal != null){//Comprueba que no se diÃ³ en cancelar o X
                    //Verifica que no sean iguales el nodo inicial y el final
                    if(!nodoInicial.equals(nodoFinal)){
                        for (int i = 0; i < vtrNode.size(); i++) {
                            if(nodoFinal.equals(vtrNode.get(i).getName())){
                                start = i;
                                band=0;
                            }else{
                                JOptionPane.showMessageDialog(null, "El nodo "+nodoFinal+" no existe.");
                                band=1;
                            }
                        }
                    //Si son iguales imprime el mensaje y solicita nuevamente    
                    }else{
                        JOptionPane.showMessageDialog(null, "No se pueda hacer un recorrido al mismo nodo de partida.");
                        band=1;
                    }
                }else{
                    band=2;
                }
            }while(band==1);
            
            //Si no se presionÃ³ el botÃ³n cancelar o X ingresa
            if(band != 2){
                System.out.println("Ingresa "+band);
                //Recorre los nodos para pintar de azul al nodo final
                for(Node ele : vtrNode){
                    if(ele.getName().equals(nodoFinal)){
                        ele.setColor(true);
                        repaint();
                    }
                }

                //Se crea la instancia de la clase FordFulkerson
                max = new FordFulkerson();

                //Se llama el metodo que calcula el flujo maximo y a su vez la matriz resultante
                int maximum = max.calcular(adyacencia, start, end, vtrNode.size());

                //Si maximo es mayor a 0 quiere decir que hay camino
                if(maximum > 0){
                    //RecorrÃ© todos los nodos en manera de matriz
                    for (int i = 0; i < vtrNode.size(); i++) {
                        for (int j = 0; j < vtrNode.size(); j++) {
                            //Si el paso en la relaciÃ³n de la matriz resultante es 0 entonces ingresa al condicional
                            if(adyacencia[i][j] == 0){
                                //RecorrÃ© todos los arcos para saber si existe una ralciÃ³n entre los nodos
                                for (int k = 0; k < vtrArco.size(); k++) {
                                    if(vtrArco.get(k).getFrom().equals(vtrNode.get(i).getName()) && vtrArco.get(k).getTo().equals(vtrNode.get(j).getName())){
                                        //Si la encuentra entonces aÃ±ade el texto para imprimir el cuello de botella y remueve la relaciÃ³n
                                        cuello += "( "+vtrNode.get(i).getName()+" , "+vtrNode.get(j).getName()+" )\n";
                                        vtrArco.remove(k);
                                    }
                                }
                            }
                        }
                    }

                    //Repinta todo nuevamente
                    repaint();

                    //Si hay cuello de botella los imprime, en caso contrario indica que no existe cuello de botella
                    if(cuello != ""){
                        JOptionPane.showMessageDialog(null, "Aristas con cuello de botella: \n" + cuello + "\n"
                            + "Flujo maximo del grafo: " + maximum);
                    }else{
                        JOptionPane.showMessageDialog(null, "No hay aristas con cuello de botella\n"+"\n"
                            + "Flujo maximo del grafo: " + maximum);
                    }

                    //Si no hay caminos imprime un mensaje indicando esto
                }else{

                    JOptionPane.showMessageDialog(null, "No existe ningun camino posible entre los nodos"
                            + " ( "+nodoInicial+" , "+nodoFinal+" ) ");   
                }
            }
        }
    }//GEN-LAST:event_tbtRunActionPerformed

    private void tbtDesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbtDesActionPerformed
        //DESHACER
        if(!this.DesH.isEmpty()){//validamos que la pila deshacer no este vacia
            System.out.println(this.DesH.toString());
            Elemento undo = new Elemento();
            undo = this.DesH.getFirst(); //obtenemos el ultimo elemento de la pila
            
            switch(undo.getAccion()){ //validamos la ultmima accion realizada
                
                case "add"://aÃ±adir elemento
                    if(undo.getNodo()!=null){//validamos el tipo de elemento
                        
  
                        this.ReH.addFirst(new Elemento(undo.getNombre(),"add",undo.getIndice(),undo.getNodo(),undo.getId()));//almacenamos el elemento en la pila rehacer
                        this.vtrNode.remove(this.DesH.pop().getIndice());//se elimina el unlimo elemento aÃ±adido
                        
                    }else if(undo.getArco()!=null){
                        this.ReH.addFirst(new Elemento(undo.getNombre(),"add",undo.getIndice(),undo.getArco(),undo.getId()));
                        this.vtrArco.remove(this.DesH.pop().getIndice());
                    }
               break;
               
                case "del"://eliminar elemento
                    if(undo.getNodo()!=null){//validamos el tipo de elemento
                        
                        this.ReH.addFirst(new Elemento(undo.getNombre(),"del",undo.getIndice(),undo.getNodo(),undo.getId()));//almacenamos el elemento en la pila rehacer
                        this.vtrNode.add(this.DesH.pop().getNodo());//se aÃ±ade el unlimo elemento eliminado
                        
                    }else if(undo.getArco()!=null){
                        
                        this.ReH.addFirst(new Elemento(undo.getNombre(),"del",undo.getIndice(),undo.getArco(),undo.getId()));
                        this.vtrArco.add(this.DesH.pop().getArco());
                    }
                break;
                
                case "upd"://actualizar elemento
                    
                    if(undo.getNodo()!=null){
                        
                        i=undo.getIndice();
                        Node n = this.vtrNode.get(i); 
                        this.ReH.addFirst(new Elemento(n.getName(),"upd",undo.getIndice(),n,n.getId())); //se almacena la ultima actualizacion realizada en la pila rehacer
                        
                        for(Arcos ar : vtrArco){//Recorremos el arraylist de Elementos.
                   
                            if(ar.getFrom().equals(n.getName())){//validamos aristas adyacentes al nodo
                                
                                ar.setFrom(undo.getNombre());//actualizamos el atributo de adyacencia de las aristas
                            }
                            
                            if(ar.getTo().equals(n.getName())){
                                
                                ar.setTo(undo.getNombre()); 
                            }
                        }
                    
                        n.setName(this.DesH.pop().getNombre());//actualizamos el nodo al con el id anterior
               
                    }else if(undo.getArco()!=null){
                        i=undo.getIndice();
                        Arcos a = this.vtrArco.get(i);
                        this.ReH.addFirst(new Elemento(String.valueOf(a.getValue()),"upd",undo.getIndice(),a,a.getId()));
                        a.setValue(Integer.parseInt(this.DesH.pop().getNombre()));//actualizamos la arista al peso anterior
                    }
                break;   
                
                case "mov"://actualizar elemento
                    if(undo.getNodo()!=null){
                       
                        int v = undo.getIndice();
                        Node n = this.vtrNode.get(v); 
                        Node copia = new Node(n.getX(), n.getY(), n.getName(), n.getId());
                        n.setX(undo.getNodo().getX());
                        n.setY(undo.getNodo().getY());
                        ReH.addFirst(new Elemento(copia.getName(),"mov",undo.getIndice(),copia,copia.getId())); //se almacena la ultima actualizacion realizada en la pila rehacer
                        
                         for(Arcos ar : vtrArco){//Recorremos el arraylist de Elementos.
                            if(ar.getFrom().equals(n.getName())){//validamos aristas adyacentes al nodo
                                
                                ar.setX1(undo.getNodo().getX());
                                ar.setY1(undo.getNodo().getY()); //actualizamos el atributo de adyacencia de las aristas
                            }
                            
                            if(ar.getTo().equals(n.getName())){
                             
                               ar.setX2(undo.getNodo().getX());
                               ar.setY2(undo.getNodo().getY()); 
                            }
                        
                        }
                        this.DesH.pop();//actualizamos el nodo al con el id anterior
               
                    }
                break; 
            } 
            //se actualizan los indices de las pilas de elementos con los cambios realizados en los arraylist al deshacer        
            for(Elemento el : DesH){
                for(Node ele : vtrNode){
                    if(el.getNodo()!=null && el.getId() == ele.getId()){
                        i= this.vtrNode.indexOf(ele);
                        el.setIndice(i);
                       
                    }     
                }
            }
                    
            for(Elemento el : DesH){
                for(Arcos arc : vtrArco){
                    if(el.getArco()!=null && el.getId() == arc.getId()){
                        i= this.vtrArco.indexOf(arc);
                        el.setIndice(i);
                    }   
                }
            } 
                     
            for(Elemento el : ReH){
                for(Node ele : vtrNode){
                    if(el.getNodo()!=null && el.getId() == ele.getId()){
                        i= this.vtrNode.indexOf(ele);
                        el.setIndice(i);
                    }   
                }
            }
                    
            for(Elemento el : ReH){
                for(Arcos arc : vtrArco){
                    if(el.getArco()!=null && el.getId() == arc.getId()){
                        i= this.vtrArco.indexOf(arc);
                        el.setIndice(i);
                    }     
                }
            }  
        repaint();
        }
    }//GEN-LAST:event_tbtDesActionPerformed

    private void tbtRehActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbtRehActionPerformed
        //REHACER
        if(!this.ReH.isEmpty()){//validamos que la pila rehacer no este vacia
 
            Elemento redo = new Elemento();
            redo = ReH.getFirst(); //obtenemos el ultimo elemento de la pila
            
            switch(redo.getAccion()){//validamos la ultmima accion realizada
                case "add"://aÃ±adir elemento
                    if(redo.getNodo()!=null){//validamos el tipo de elemento
                        
                        this.DesH.addFirst(new Elemento(redo.getNombre(),"add",redo.getIndice(),redo.getNodo(),redo.getId()));//almacenamos el elemento en la pila deshacer
                        this.vtrNode.add(this.ReH.pop().getNodo());//se aÃ±ade el unlimo elemento eliminado
            
                    }else if(redo.getArco()!=null){
                        
                        this.DesH.addFirst(new Elemento(redo.getNombre(),"add",redo.getIndice(),redo.getArco(),redo.getId()));
                        this.vtrArco.add(this.ReH.pop().getArco());
                    }
                break;
                
               case "del"://eliminar elemento
                    if(redo.getNodo()!=null){//validamos el tipo de elemento
                        
                        this.DesH.addFirst(new Elemento(redo.getNombre(),"del",redo.getIndice(),redo.getNodo(),redo.getId()));//almacenamos el elemento en la pila deshacer
                        this.vtrNode.remove(this.ReH.pop().getIndice());//se elimina el ultimo elemento aÃ±adido
                  
                    }else if(redo.getArco()!=null){
                        
                        this.DesH.addFirst(new Elemento(redo.getNombre(),"del",redo.getIndice(),redo.getArco(),redo.getId()));
                        this.vtrArco.remove(this.ReH.pop().getArco());
                    }
               break;
               
                case "upd"://actualizar elemento
                    if(redo.getNodo()!=null){
                        
                        i=redo.getIndice();
                        Node n = this.vtrNode.get(i); 
                        this.DesH.addFirst(new Elemento(n.getName(),"upd",redo.getIndice(),n,n.getId())); //se almacena la ultima actualizacion realizada en la pila rehacer
                        
                        for(Arcos ar : vtrArco){//Recorremos el arraylist de Elementos.
                   
                            if(ar.getFrom().equals(n.getName())){//validamos aristas adyacentes al nodo
                                
                                ar.setFrom(redo.getNombre());//actualizamos el atributo de adyacencia de las aristas
                            }
                            
                            if(ar.getTo().equals(n.getName())){
                                
                                ar.setTo(redo.getNombre()); 
                            }
                        }
                    
                        n.setName(this.ReH.pop().getNombre());//actualizamos el nodo al con el id anterior
               
                    }else if(redo.getArco()!=null){
                        i=redo.getIndice();
                        Arcos a = this.vtrArco.get(i);
                        this.DesH.addFirst(new Elemento(String.valueOf(a.getValue()),"upd",redo.getIndice(),a,a.getId()));
                        a.setValue(Integer.parseInt(this.ReH.pop().getNombre()));//actualizamos la arista al peso anterior
                    }
                break;   
                
                case "mov"://actualizar elemento

                    if(redo.getNodo()!=null){
                        
                        int v = redo.getIndice();
                        Node n = this.vtrNode.get(v); 
                        Node copia = new Node(n.getX(), n.getY(), n.getName(), n.getId());
                        this.DesH.addFirst(new Elemento(copia.getName(),"mov",redo.getIndice(),copia,copia.getId())); //se almacena la ultima actualizacion realizada en la pila rehacer
                        n.setX(redo.getNodo().getX());
                        n.setY(redo.getNodo().getY());
                        
                         for(Arcos ar : vtrArco){//Recorremos el arraylist de Elementos.
                             System.out.println(ar.getFrom()+" "+ar.getTo());
                            if(ar.getFrom().equals(n.getName())){//validamos aristas adyacentes al nodo
                                
                                ar.setX1(redo.getNodo().getX());
                                ar.setY1(redo.getNodo().getY()); //actualizamos el atributo de adyacencia de las aristas
                            }
                            
                            if(ar.getTo().equals(n.getName())){
                             
                               ar.setX2(redo.getNodo().getX());
                               ar.setY2(redo.getNodo().getY()); 
                            }
                        
                        }
                        this.ReH.pop();//actualizamos el nodo al con el id anterior
               
                    }
                break; 
               
            } 
            //se actualizan los indices de las pilas de elementos con los cambios realizados en los arraylist al deshacer
                
            for(Elemento el : DesH){
                
                for(Node ele : vtrNode){
                            
                   if(el.getNodo()!=null && el.getId() == ele.getId()){
                        i= this.vtrNode.indexOf(ele);
                       el.setIndice(i);        
                    }     
                }
            }
                    
            for(Elemento el : DesH){
                
                for(Arcos arc : vtrArco){
                    
                    if(el.getArco()!=null && el.getId() == arc.getId()){
                        i= this.vtrArco.indexOf(arc);
                        el.setIndice(i);      
                    }       
                }
            }
                    
            for(Elemento el : ReH){
                
                for(Node ele : vtrNode){
                        
                    if(el.getNodo()!=null && el.getId() == ele.getId()){
                        i= this.vtrNode.indexOf(ele);
                        el.setIndice(i);     
                    } 
                }
            }
                    
            for(Elemento el : ReH){
                
                for(Arcos arc : vtrArco){
                         
                    if(el.getArco()!=null && el.getId() == arc.getId()){
                        i= this.vtrArco.indexOf(arc);
                        el.setIndice(i);          
                    }
                }
            }
            repaint();
        } 
    }//GEN-LAST:event_tbtRehActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MiVentana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MiVentana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MiVentana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MiVentana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MiVentana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar BarraHerramientas;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator10;
    private javax.swing.JToolBar.Separator jSeparator11;
    private javax.swing.JToolBar.Separator jSeparator12;
    private javax.swing.JToolBar.Separator jSeparator13;
    private javax.swing.JToolBar.Separator jSeparator14;
    private javax.swing.JToolBar.Separator jSeparator15;
    private javax.swing.JToolBar.Separator jSeparator16;
    private javax.swing.JToolBar.Separator jSeparator17;
    private javax.swing.JToolBar.Separator jSeparator18;
    private javax.swing.JSeparator jSeparator19;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JToolBar.Separator jSeparator9;
    private javax.swing.JMenuItem opClose;
    private javax.swing.JMenuItem opNew;
    private javax.swing.JMenuItem opOpen;
    private javax.swing.JMenuItem opSave;
    private javax.swing.JPanel tablero;
    private javax.swing.JToggleButton tbtDel;
    private javax.swing.JButton tbtDes;
    private javax.swing.JToggleButton tbtEdit;
    private javax.swing.JToggleButton tbtMov;
    private javax.swing.JToggleButton tbtNod;
    private javax.swing.JButton tbtReh;
    private javax.swing.JToggleButton tbtRel;
    private javax.swing.JButton tbtRun;
    // End of variables declaration//GEN-END:variables
}
